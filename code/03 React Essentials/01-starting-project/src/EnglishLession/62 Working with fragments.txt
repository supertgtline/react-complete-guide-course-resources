Now let's stick to this JSX topic

because there's one other important thing you must know

about JSX and writing JSX code.

And for that here in this app.jsx file

we can take a look at this return statement.

In there I'm returning a div which includes this header

and this main section.

That's in the end what's inside this div.

And of course here you could say

that this div is kind of redundant.

It might be needed for styling purposes

but I can tell you that this is not the case.

There's no rule in this index CSS file

that would require this div here

and therefore of course, we can delete it, right?

Because why would we keep an unnecessary element here?

Well, that's why.

If I delete it, I'm getting an error here.

I'm getting an error that JSX expressions

must have one parent element.

So the problem I have here is that in this return statement

I'm returning two sibling elements,

not two elements inside of one parent element

as I had it before.

Because before with that div, I was returning one div.

And then in that div we had these sibling elements.

But that's okay.

But returning just these sibling elements

doesn't seem to work.

And it's typically easier to understand

why this here is not allowed.

If you take a look at some other kind of value.

And for this, let's say that here

in this genRandomInt function, we don't just wanna return

one random number, but two for whatever reason.

Well, in JavaScript, we can't return two values

by just wrapping them with parentheses

and then splitting them across multiple lines.

This here would be invalid JavaScript code

because you can only return one value, not two values.

And that is indeed what we're trying to do here.

Here we're trying to return two values

because you must not forget

that this JSX code here in the end is just

some syntactic sugar, you could say.

Some code you can use during development,

but as you learned in the last lecture,

the alternative is of course that you call

React.createElement.

And here we would then try to create the header

and then also this main element

and then some nested content in there.

And this here would also be invalid code,

because as I just explained, you can't return two values

and these two pieces of JSX code here

are in the end two values.

So therefore, we can't return two values here

in a normal function

and we can't do that here with JSX code either.

And that's why we need one wrapping element

so that technically we return one value.

And then internally that value stores these other values.

So you can think of this div

like an object or array that wraps these values.

But of course this limitation or restriction also means

that you do end up with an extra div in your DOM structure.

If you inspect your code with the dev tools

you can see that extra div here.

This div.

That's that div from the app component.

And whilst this of course isn't a huge problem

having extra elements like this

in your DOM simply is unnecessary.

And that's why React gives you an alternative.

It gives you a special fragment component, which you can use

as a wrapper if you do need a root component

to wrap some sibling components

but you don't wanna render an actual element to the screen.

And for this here, we can import fragment from React

and that's simply a component built into React.

And you can use this fragment component here

instead of the div.

So here for the opening and also for the closing tag.

And with that, we got no error here

but if we now inspect the source code

we also no longer have this unnecessary div.

This div here is coming from the index HTML file

but the header and main elements are now no longer wrapped

by this unnecessary div.

And modern React projects

like the one I'm providing to you here

actually give you an even shorter alternative.

There you don't even need to import fragment.

Though it's good to know about that

for older projects which might not support this new syntax

I'm about to show you.

Because in those new projects,

you can simply write code like this.

So this empty tag here can be used

in this and in most React projects.

And this empty tag simply is an alternative

to this fragment, which is recognized by React.

And with that we're also not getting an error

and we're also not getting this extra div

in this DOM structure.

But we also don't have a lot of code to write.