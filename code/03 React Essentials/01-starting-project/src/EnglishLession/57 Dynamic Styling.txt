So, now that we know

how to render content conditionally,

let's talk about styling and, most importantly,

about dynamic styling of HTML elements.

Because at the moment here,

we can select different tabs,

but, of course, we got no visual indicator

about which tab is selected.

I mean, of course, we can tell by the content,

but it would be nice

if the selected tab would be highlighted,

and that's currently not the case.

Now, we could achieve this by setting a class

on the button that was selected.

And in React, you can set a class

by using the className prop.

And that of course might be a bit strange,

because in regular HTML,

you would use the class attribute instead, not className.

Well, that's JSX-specific,

and thankfully, most attributes, like id and so on,

are the same in JSX and HTML.

But for the class attribute, it's actually different.

And in JSX, you need to use className

if you want to add a class to a button.

But with that, we could add the active class to the button,

because that is a class I prepared in the index.css file.

In there, you'll find this rule

which uses the active class for styling.

So, if you add this,

you will see that all buttons are marked as active,

which of course is not really the result we want,

but we can at least see that we can style them.

But, now, of course,

the goal is to set this dynamically.

And to set this dynamically,

we could accept a new prop here,

which could be named isSelected, for example.

Again, the name is up to you,

but, of course, the name should describe

which kind of value this prop will hold.

And here, we could expect to get a boolean

which is true if this button is selected,

so if it was clicked,

or false if it's currently not selected.

And then we can set the className dynamically,

again, by using these curly braces,

which we always use if we need some dynamic

or JavaScript-based value.

And here, we could use a ternary expression again.

Because, just as we can output content conditionally

with ternary expressions and some other approaches,

we can also set attributes conditionally.

And here, we can set is className either to active,

if isSelected is true,

or to an empty string, or undefined,

both is valid if this is currently not selected,

so that this button has no class if it's not selected,

but it has the active class if it is selected.

But, for this code here to work,

we, of course, must make sure that we do pass a value

to this TabButton component for this isSelected prop.

Hence, back in the App component

where we're using the TabButton,

we now need to add this second prop, this isSelected prop,

and set it equal to a value.

And this value, of course, also is derived dynamically,

because it is based on our state,

on this selectedTopic state.

Because, when that state changes,

the App component executes again,

and therefore these TabButtons are re-evaluated.

So therefore, here, we can use our selectedTopic state

and check if it's equal to components,

because I'm on the Components button here.

And this will yield true,

if selectedTopic is equal to this components identifier,

and false otherwise.

And with that, we're then passing that true or false value

to this isSelected prop.

So, we can also copy that

and add that to all the other TabButtons,

though, of course, on the second TabButton,

this should be equal to jsx,

because this is the JSX button,

and I'll reformat the code to make it a bit easier to read.

Here, for the third button,

we wanna check for equality to props.

And for the last button, which is about State,

we wanna check for equality to this identifier.

If we save this now,

you see that if I reload, nothing is selected,

but if I click Components, this is selected,

for JSX, that is selected, and so on.

So, now, we got that visual feedback

by conditionally setting that CSS className.

