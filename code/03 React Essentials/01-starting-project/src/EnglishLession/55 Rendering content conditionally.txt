So we're now able to output

different data here based on which button was pressed.

And initially, when this page first loads,

we displayed this Components data here.

And this, is of course, absolutely fine

and there is nothing wrong with this.

But maybe this is not the behavior we want.

Maybe we don't want to show this Components data initially,

but instead we might prefer to show

some info text initially,

something like, please select a topic.

And therefore here in our state,

the initial value should maybe be an empty string

to signal that we haven't selected anything yet,

or null, or simply no value at all

so that we don't have an initially selected topic.

But of course, if I saved this, the page breaks again.

So what we need to do now

is something you'll need to do a lot in React projects.

We need to output some content conditionally.

I only want to output this markup

with this data inside of it

if we have a selected topic, not otherwise.

And I wanna output some fallback text,

like please select a topic,

if we haven't picked a topic yet.

So we want to either use this code and show this paragraph

or use this code and show this information.

And as mentioned, outputting content conditionally

is something you'll do a lot in React.

And there are different approaches

for implementing this feature.

The first way of showing this paragraph

only if we have no selected topic

is to add curly braces here, opening and closing,

to output some dynamic content,

and to then use ternary expression.

And we could then use this selected topic state,

which initially is undefined here in my case

since I am not setting an initial value anymore.

And we could check if this is equal to undefined.

Or shorter in JavaScript,

simply add an exclamation mark in front of it

to check if it's not truthy.

And then here we can use ternary expression

to show this fallback text here

if selected topic is not truthy,

and show null otherwise.

And null is something you can output in JSX code,

it'll simply lead to nothing being rendered here.

So with that,

we're saying if we don't have a selected topic,

render this paragraph here.

Otherwise, render nothing.

And we might wanna do this

instead of showing this entire div here actually,

because now we wanna show that div

if the opposite condition is met.

So if selected topic is truthy,

if this is not equal to undefined,

or shorter in JavaScript, if it's truthy, written like this.

And then if that's the case, we wanna render this div.

So we paste that in here.

And otherwise, we render nothing.

And after formatting, this code looks like this.

So now we have these two opposite conditions

where we either render this paragraph or this div.

And of course, we could also merge this

into one single ternary expression

and simply take this div here

and render this instead of null.

Because in the end,

this is the alternative to showing this message.

So we could shorten this code like this.

Both approaches would be valid.

And with that, if you save this,

you see please select a topic initially.

And you see that we don't have any error

in the console anymore.

But if I press Components or JSX or any other button,

I see the respective topics content here instead.

So this is one way of rendering content conditionally.

An alternative would be to go back to that approach

where I used two dynamic segments here, so to say.

And to still write this in a more concise way

by omitting this else case here, in this case null.

And instead of using a question mark here,

we can use two ampersand symbols,

so the logical AND operator.

And with this syntax,

we're using a little trick in JavaScript.

Because the AND operator will actually output

the value that comes after it

if the condition in front of it yields true.

So if we don't have a selected topic,

this paragraph will be output.

And down here, we could therefore also use the AND operator

and remove this else case.

And therefore also write this like this.

And if we save that and reload,

we got the same behavior as before.

It's up to you which approach you prefer.

This can be shorter than using a ternary expression.

And using these two segments

instead of one combined ternary expression

can lead to more readable and understandable code,

which is why I wanted to show this approach here as well.

But there also is a last alternative,

and I'm showing you all these alternatives

because you'll see all these alternatives

in real React projects,

and you therefore need to know about them

as a React developer.

Because the last alternative is to use a variable,

let's say a variable we create here,

which we could name tabContent.

But now in here, I'm not trying to store some state,

because as you learned, that won't work.

Instead in here, I wanna store some JSX code.

Because JSX code cannot just be returned,

instead, you can use it as a regular value

anywhere in your component code.

So you can also store it in variables and constants.

So therefore here, I'll now grab this paragraph,

cut it, and remove this here,

and store this paragraph and tabContent.

But now here, I'll add a if check

and check if we have a selected topic.

And if that's the case, I'll overwrite tabContent.

And I now wanna store my div

with the actual content as a value.

So now we can grab this div here and remove this,

and then store this div here if this condition is met.

So with that, we're now setting this variable

before we return the JSX code.

And we can now use this variable

and output that down here below this menu.

And that leads to leaner JSX code down here, as you can see,

whilst maintaining the same functionality

simply by using a if statement and such a variable.

If I reload, we got the same behavior as before.

And with that, you now saw different ways

of rendering content conditionally,

and it's totally up to you which approach you prefer.