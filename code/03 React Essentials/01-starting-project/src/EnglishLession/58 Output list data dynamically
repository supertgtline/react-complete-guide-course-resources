
Now at this point,

this first demo application is pretty much finished.

It has all the features we want to have

but there's still something that can be improved.

And specifically it's this area which can be improved.

Though I don't mean the visuals, but the underlying code.

Because in here in the app component,

we got these four core concept items

being displayed like this.

Now the problem with this approach here is that

we manually repeat this core concept component four times

in our code because I have four data entries

in this core concepts array.

But if I were to remove one of these entries

by commenting it out, for example,

the app would therefore kind of break

and we would see this broken element here

because I still try to output four elements.

So besides us repeating this code,

and therefore doing some unnecessary typing,

this approach also has the disadvantage

of potentially breaking if the data source gets changed.

So if for example, one element gets removed,

and therefore it would be better if the number

of core concept Components here

would be derived dynamically based on the number of items

we have in this core concepts array.

So if you could simply output one core concept component

per entry in that array automatically.

And that is thankfully something we can do.

Now to understand how we can output

this list here dynamically,

it's first of all important to understand

that you can output an array of data in JSX.

You can output it dynamically, and that could be an array

of strings like Hello and World.

If I would save this, you would see this text here

but it can also be an array of JSX elements like hello

in a paragraph and World in a paragraph.

And therefore now you would see this output here.

So JSX is capable of dealing with arrays of renderable data,

arrays of JSX code, for example.

Now here we have an array of JavaScript objects

and JSX is not really able to output that,

and it especially, of course,

does not know that this image data should be wrapped

in a image element and so on.

But since JSX is capable of outputting an array

of JSX elements,

we could try to transform this array of objects

to an array of JSX elements.

So here in this unordered list,

we can output something dynamically

and the something I wanna output is my core concepts array

transformed to an array of JSX elements

and you can transform arrays in JavaScript with help

of the built-in map method.

Which produces a new array based on the existing array.

For that map takes a JavaScript function, for example,

such an arrow function.

And that function will automatically receive an array item

as an input.

And here I'll name it concept item,

though that name is up to you.

Because this function will now be executed by JavaScript

for every item in that array.

So at the moment, three times,

since I have three elements in this array,

since the last element is currently commented out.

And we will get that item

for every execution as a value for this parameter.

So inside of this arrow function, we can then return

the code we want to transform this item too.

So in this case, we wanna transform it

to this core concept component being used as JSX code.

But of course now we no longer access

a specific core concept index here.

Instead, we use this concept item

because that already is one of those items

in this core concepts array.

So what we previously manually accessed by index here,

step by step, can now be accessed automatically with help

of this map method.

Item by item, since as mentioned,

this function executes once for every item in the array,

and therefore this is a quick and easy way

of dynamically generating this list,

and therefore now we can get rid of all this code here

and just use this map method to output a list of data.

And that's another super useful feature and pattern

because as it turns out, and as you will see

throughout this course, in React apps,

you will often output lists of data.

And you will almost always do that by using the map method

to transform your data to JSX code.

And therefore, now if you saved it,

we now have these three items here generated dynamically,

and if I go back to data JS

and I comment this last item back in,

you see that now we have four items here.

Without us changing the app component,

because that list is now generated dynamically.

What you'll also see is that if you open

the developer tools, you get a warning there.

A warning that each child in a list should have

a unique key prop and I'll get back to that later

in the course because it's a bit more advanced.

But in the end, what you must do to get rid of that warning

is you must add a key prop to this component.

Even though we're not using this prop

inside of the component.

Here, I'm not trying to use a key prop,

but still we must add it because it will be used by React.

It's a special prop, understood and used by React

and this key prop can therefore be added to any component.

It can be added to built-in elements

and to custom Components as we're doing it here.

And this value for this key prop

should be a value that uniquely identifies a list item.

Under the hood, it's used by React to efficiently render

and update this list.

So here we could use the title as a unique value

because every item here has a different title.

So that will be a unique value and it is a value

that can be used to tell these different items apart

and that's exactly what this key prop is all about.

So with that special prop added here, the list still looks

as it did before, but now the warning is gone.

And that's there for now

how you can output list content dynamically.